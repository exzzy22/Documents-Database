@page "/"
@inject IDocumentService _documentService
@inject IModalService modal

@using System.Linq
<label for="Search" class="fw-bold">Search</label>
<input @bind-value="Search" @bind-value:event="oninput" @onkeyup="Filter" id="Search"/>
<button @onclick="@(()=>Modal.Show<_PopUpAdd>("Add Document"))" class="btn btn-primary" style="float: right;">Add New Document</button>
 <table class="table">
 <thead>
  <tr>
    <th scope="col">Company</th>
    <th scope="col">Date</th>
    <th scope="col">Items</th>
    <th scope="col">Buttons</th>
  </tr>
</thead>
<tbody>
        @foreach(var doc in Documents)
        {
            <tr scope="row">
                <td>@doc.Company</td>
                <td>@doc.Date</td>
                <td><_ItemsView Items="@doc.Items"></_ItemsView></td>
                <td>
                    <button @onclick="@(()=>ShowEditDocument(doc))" class="btn btn-primary">Edit</button>
                    <button @onclick="@(()=>RemoveDocument(doc))" class="btn btn-danger">Delete</button>
                </td>
             </tr>  
        }
</tbody>
</table> 


@code{
    [CascadingParameter] 
    public IModalService Modal { get; set; }
    private IEnumerable<DocumentDTO> Documents { get; set; }
    private string Search { get; set; } = string.Empty;
    bool ShowComponent { get; set; } = false;

    protected override void OnInitialized()
    {
        Documents = _documentService.GetAll();
    }
    void ShowEditDocument(DocumentDTO doc)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(_PopUpEdit.DocumentModel), doc);
        var options = new ModalOptions();
        options.Animation = ModalAnimation.FadeInOut(2);

        Modal.Show<_PopUpEdit>("Edit Document", parameters);
    }
    public void RemoveDocument(DocumentDTO doc)
    {
        _documentService.Delete(doc);
    }

    public void Filter()
    {
        Documents = Documents.Where(d => d.Company.Contains(Search, StringComparison.OrdinalIgnoreCase) || d.ItemsInString.GetString().Contains(Search,StringComparison.OrdinalIgnoreCase));
    }

}
