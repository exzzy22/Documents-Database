@inject IDocumentService _documentService

<EditForm Model="@DocumentModel" OnValidSubmit="@Add">
<DataAnnotationsValidator /> 
<div style="width: 350px;">
  <div class="form-group">
    <label for="InputComapny">Comapny</label>
    <InputTextArea @bind-Value="DocumentModel.Company" type="text" class="form-control" id="InputComapny" placeholder="Comapny Name" rows="1" ></InputTextArea>
    <ValidationMessage For="@(()=>DocumentModel.Company)"/>
  </div>
  <div class="form-group">
    <label for="InputDate">Date</label>
    <InputDate @bind-Value="DocumentModel.Date" class="form-control"/>
  </div>
  <div class="form-group">
      <br/>
    <table>
        <tbody>
            @foreach (var item in DocumentModel.Items)
            {
                <tr scope="row"><td>@item.Name</td><td style="width: 250px;"></td>
                <td><button @onclick="(() => RemoveItem(item))" type="button" class="btn btn-danger btn-sm">Delete</button></td></tr>
            }
            <tr><td><input @bind-value="@AddText" /></td><td style="width: 50px;"/><td><button @onclick="@AddItem" type="button" class="btn btn-primary btn-sm" style="width: 60px;">Add</button></td></tr>
        </tbody>
    </table>
  </div>
 <div class="form-group">
    <InputFile OnChange="@OnInputFileChange" />
    <ValidationMessage For="@(()=>DocumentModel.FileExist)"/>
  </div>
  <div class="form-group">
  <br />
    <button type="submit" class="btn btn-primary" style="float: right;">Add</button>
  </div>
</div>
</EditForm>

@code
{
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }
    [Parameter]
    public DocumentDTO DocumentModel { get; set; }
    public string AddText { get; set; }
    private List<Item> tempItems = new();
    public EditContext editContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DocumentModel = new();
        DocumentModel.Items = new List<Item>();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        DocumentModel.FileExt ="."+ e.File.ContentType.Split("/")[1];
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();
        DocumentModel.DOC = bytes;
        DocumentModel.FileExist = true;
    }

    public void AddItem()
    {
        Item item = new Item(AddText,DocumentModel.PkDocumentId);
        DocumentModel.Items.Add(item);
    }

    public void RemoveItem(Item item)
    {
        DocumentModel.Items.Remove(item);
    }

    public async Task Add()
    {
        await _documentService.Create(DocumentModel);
        await ModalInstance.CloseAsync();
    }
}
